s a stable, static IP address. If the virtualization layer borks when the cloud has recovered the cloud instances of compute, the developer should be able to rely on the web application just working without having to re-jigger network settings.2.2 API for Creation, Deletion, Cloning of InstancesDevelopers should be able to interact with the cloud computer, to do business with it, without having to get on the phone with a sales person, or submit a help ticket. In other words, the customer should be able to truly get on-demand computing when they demand, whenever they demand. Joyent only began to offer this recently through  HYPERLINK "http://www.aptana.com/" Aptana and their Aptana Studio product. However, the API is only available to Aptana at this point. The API needs to be publicly available to everyone. Provide a credit card that works and is your and you should get compute, storage, and RAM on-demand. The challenges for cloud computing companies is to figure the just-in-time economics that allow us to provide on-demand infrastructure without having lots of infrastructure sitting around waiting to be used. I think this means that cloud computing companies will, just like banks, begin more and more to “loan” each other infrastructure to handle our own peaks and valleys, But in order for this to happen we’d need the next requirement.2.3 Application Layer InteroperabilityCloud computers need to support a core set of application frameworks in a consistent way. We propose that cloud computers should support PHP, Ruby, Python, Java and the most common frameworks, libraries, gems/plugins, and application/web servers for each of these languages. Essentially, a developer should be able to move between Joyent, the  HYPERLINK "http://finance.google.com/finance?q=amzn" Amazon Web Services,  HYPERLINK "http://finance.google.com/finance?q=goog" Google, Mosso, Slicehost, GoGrid, etc. by simply pointing the deploy gun at the cloud having used the API mentioned abo